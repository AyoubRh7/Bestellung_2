    Modify the Order Model: Add a method to get orders filtered by date, and join necessary tables to fetch the additional information (restaurant name, user name, and ordered item names).

    Modify the OrderController: Add an endpoint to retrieve the order details, including restaurant name, user name, and order items names for a given day.

Here's how to do it:
Step 1: Update the Order Model

Add a new method to fetch the order data for a specific day, including the related information from the restaurant, users, and order_item tables.

// models/Order.php

public function getOrderDetailsByDate($date) {
    $query = "
        SELECT o.order_id, o.order_date, r.name AS restaurant_name, u.username AS user_name, oi.menu_id, m.item_name AS ordered_item_name
        FROM " . $this->table . " o
        LEFT JOIN restaurant r ON o.restaurant_id = r.restaurant_id
        LEFT JOIN users u ON o.user_id = u.id
        LEFT JOIN order_item oi ON o.order_id = oi.order_id
        LEFT JOIN menu m ON oi.menu_id = m.menu_id
        WHERE DATE(o.order_date) = :date
        ORDER BY o.order_date DESC
    ";

    $statement = $this->conn->prepare($query);
    $statement->bindParam(':date', $date);
    $statement->execute();

    $orders = $statement->fetchAll(PDO::FETCH_ASSOC);

    // Return data
    return $orders;
}

Explanation:

    The getOrderDetailsByDate method performs a query that joins the orders, restaurant, users, order_item, and menu tables.
    The query filters orders by the given date using WHERE DATE(o.order_date) = :date.
    The selected fields include the order_id, order_date, restaurant_name, user_name, ordered_item_name (from the menu table), and the menu_id.
    The result is returned as an associative array.

Step 2: Update the OrderController

Add an endpoint in the OrderController to handle the request for order details filtered by date.

// controllers/OrderController.php

public function getOrdersByDate($date) {
    try {
        $orderModel = new Order();
        $orders = $orderModel->getOrderDetailsByDate($date);

        if ($orders) {
            header("Content-Type: application/json");
            echo json_encode($orders);
        } else {
            http_response_code(404);
            echo json_encode(["message" => "No orders found for the given date."]);
        }
    } catch (Exception $e) {
        http_response_code(500);
        echo json_encode(["message" => "Failed to fetch orders.", "error" => $e->getMessage()]);
    }
}

Explanation:

    The getOrdersByDate method calls the getOrderDetailsByDate method of the Order model, passing the $date parameter.
    If orders are found, it returns the orders as a JSON response. If no orders are found for the given date, it sends a 404 error with a message.
    In case of an exception, it returns a 500 error with a message.

Step 3: Define the Route for the Endpoint

If you're using an MVC framework, you would define a route for the new endpoint. Assuming you're using simple PHP routing, here's an example:

// routes/web.php or routes.php (depending on your routing setup)

if ($_SERVER['REQUEST_METHOD'] == 'GET' && isset($_GET['date'])) {
    $date = $_GET['date']; // Expecting a date in 'YYYY-MM-DD' format
    $controller = new OrderController();
    $controller->getOrdersByDate($date);
}

Explanation:

    This route listens for a GET request with the date parameter in the query string (e.g., /orders?date=2025-02-25).
    It calls the getOrdersByDate method in the OrderController to fetch the data.

Example of Calling the API

To get orders for a specific date, you can send a GET request with the date parameter:

GET /orders?date=2025-02-25

This would return a JSON response like this:

[
    {
        "order_id": 1,
        "order_date": "2025-02-25 10:30:00",
        "restaurant_name": "Chez Ali",
        "user_name": "Mark_M",
        "menu_id": 1,
        "ordered_item_name": "Tajine de Poulet au Citron"
    },
    {
        "order_id": 2,
        "order_date": "2025-02-25 11:15:00",
        "restaurant_name": "Dar Yacout",
        "user_name": "ayoub_r",
        "menu_id": 2,
        "ordered_item_name": "Couscous aux LÃ©gumes"
    }
]

Recap:

    Model Update: Added a new method in th